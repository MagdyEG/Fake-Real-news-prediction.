# -*- coding: utf-8 -*-
"""Ai project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iyQV6wWN-pJEnUGvmx_SeFnbRFNtp9MT

# Importing the libraries
"""

#importing some libraries that we need
import numpy as np
import pandas as pd
import re  
from nltk.corpus import stopwords 
from nltk.stem.porter import PorterStemmer 
from sklearn.feature_extraction.text import TfidfVectorizer 

from sklearn.model_selection import train_test_split

from sklearn.linear_model import LogisticRegression 
from sklearn.metrics import accuracy_score 
from google.colab import files
import io

"""# download stopwords

"""

import nltk
nltk.download('stopwords')

"""# Data Preprocessing"""

data = files.upload()

data = pd.read_csv(io.StringIO(data['train.csv'].decode('utf-8')))

data.shape

data.head()

data.isnull().sum()

data = data.fillna('')

data['content'] = data['author']+' '+ data['title']

print(data['content'])

X = data.drop(columns='label', axis=1)
Y = data['label']

print("printing X data")
print(X)

print("Printing The y Data")
print(Y)

"""# Stemming"""

port_stem = PorterStemmer()

def stemming(content):
    stemmed_content = re.sub('[^a-zA-Z]',' ',content)
    stemmed_content = stemmed_content.lower()
    stemmed_content = stemmed_content.split()
    stemmed_content = [port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
    stemmed_content = ' '.join(stemmed_content)
    return stemmed_content

data['content'] = data['content'].apply(stemming)

print(data['content'])

X = data['content'].values
Y = data['label'].values

print(X)

print(Y)

vectorizer = TfidfVectorizer()
vectorizer.fit(X)

X = vectorizer.transform(X)

print(X)

"""# Splitting the dataset to training & test data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, stratify=Y, random_state=2)

print(X_test)

"""# Training the Model"""

model = LogisticRegression()
model.fit(X_train, Y_train)

"""# Accuracy score

"""

X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy score of the training data is : ', training_data_accuracy)

X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy score of the test data is : ', test_data_accuracy)

"""# Making a Predictive System"""

X_new = X_test[3]

prediction = model.predict(X_new)
print(prediction)

if (prediction[0]==0):
  print('The news is Real')
else:
  print('The news is Fake')

